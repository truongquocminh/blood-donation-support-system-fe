import React, { useState, useEffect } from 'react';
import { Modal, Descriptions, Tag, Spin, Button, Space, Progress } from 'antd';
import { Activity, User, Calendar, Heart, TrendingUp, AlertCircle, CheckCircle, XCircle } from 'lucide-react';
import toast from 'react-hot-toast';
import dayjs from 'dayjs';
import { getUserById } from '../../services/userService';

const HealthCheckDetailModal = ({ visible, onCancel, healthCheck, userId }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(false);

  const fetchUserDetail = async () => {
    if (!userId) return;

    setLoading(true);
    try {
      const response = await getUserById(userId);
      if (response.status === 200) {
        setUser(response.data.data);
      }
    } catch (error) {
      toast.error('L·ªói khi t·∫£i th√¥ng tin ng∆∞·ªùi d√πng');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (visible && userId) {
      fetchUserDetail();
    }
  }, [visible, userId]);

  const getPulseStatus = (pulse) => {
    if (pulse < 60) return { status: 'low', text: 'Th·∫•p', color: 'orange' };
    if (pulse > 100) return { status: 'high', text: 'Cao', color: 'red' };
    return { status: 'normal', text: 'B√¨nh th∆∞·ªùng', color: 'green' };
  };

  const getBloodPressureStatus = (bp) => {
    if (!bp) return { status: 'unknown', text: 'Kh√¥ng x√°c ƒë·ªãnh', color: 'default' };

    const [systolic, diastolic] = bp.split('/').map(num => parseInt(num.trim()));

    if (systolic < 90 || diastolic < 60) {
      return { status: 'low', text: 'Th·∫•p', color: 'orange' };
    }
    if (systolic > 140 || diastolic > 90) {
      return { status: 'high', text: 'Cao', color: 'red' };
    }
    return { status: 'normal', text: 'B√¨nh th∆∞·ªùng', color: 'green' };
  };

  const getEligibilityIcon = (isEligible) => {
    return isEligible ? <CheckCircle size={16} /> : <XCircle size={16} />;
  };

  const getEligibilityColor = (isEligible) => {
    return isEligible ? 'green' : 'red';
  };

  const getEligibilityText = (isEligible) => {
    return isEligible ? 'ƒê·ªß ƒëi·ªÅu ki·ªán hi·∫øn m√°u' : 'Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán hi·∫øn m√°u';
  };

  const handleApprove = () => {
    toast.success(`Duy·ªát k·∫øt qu·∫£ ki·ªÉm tra s·ª©c kh·ªèe ID: ${healthCheck.healthCheckId}`);
  };

  const handleReject = () => {
    toast.success(`T·ª´ ch·ªëi k·∫øt qu·∫£ ki·ªÉm tra s·ª©c kh·ªèe ID: ${healthCheck.healthCheckId}`);
  };

  const handleEdit = () => {
    toast.success(`Ch·ªânh s·ª≠a k·∫øt qu·∫£ ki·ªÉm tra s·ª©c kh·ªèe ID: ${healthCheck.healthCheckId}`);
  };

  const pulseStatus = healthCheck ? getPulseStatus(healthCheck.pulse) : null;
  const bpStatus = healthCheck ? getBloodPressureStatus(healthCheck.bloodPressure) : null;

  return (
    <Modal
      title={
        <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
          <Activity size={20} />
          Chi ti·∫øt ki·ªÉm tra s·ª©c kh·ªèe
        </div>
      }
      style={{ top: 10 }}
      open={visible}
      onCancel={onCancel}
      width={700}
      footer={[
        <Button key="close" onClick={onCancel}>
          ƒê√≥ng
        </Button>,
        // <Button key="edit" onClick={handleEdit}>
        //   Ch·ªânh s·ª≠a
        // </Button>,
        ...(healthCheck?.isEligible ? [
          // <Button key="approve" type="primary" onClick={handleApprove}>
          //   Duy·ªát k·∫øt qu·∫£
          // </Button>
        ] : [
          // <Button key="reject" danger onClick={handleReject}>
          //   T·ª´ ch·ªëi
          // </Button>
        ])
      ]}
    >
      {loading ? (
        <div style={{ textAlign: 'center', padding: '40px 0' }}>
          <Spin size="large" />
        </div>
      ) : healthCheck ? (
        <div>
          <Descriptions title="Th√¥ng tin ki·ªÉm tra" column={2} bordered>
            <Descriptions.Item
              label={
                <Space>
                  <Activity size={16} />
                  M√£ ki·ªÉm tra
                </Space>
              }
              span={2}
            >
              <Tag color="blue">#{healthCheck.healthCheckId}</Tag>
            </Descriptions.Item>

            <Descriptions.Item
              label={
                <Space>
                  <Calendar size={16} />
                  Th·ªùi gian ki·ªÉm tra
                </Space>
              }
              span={2}
            >
              {dayjs(healthCheck.checkedAt).format('DD/MM/YYYY HH:mm:ss')}
            </Descriptions.Item>

            <Descriptions.Item
              label={
                <Space>
                  <User size={16} />
                  Ng∆∞·ªùi ƒë∆∞·ª£c ki·ªÉm tra
                </Space>
              }
              span={2}
            >
              {user ? user.fullName : 'ƒêang t·∫£i...'}
            </Descriptions.Item>
          </Descriptions>

          <div style={{ margin: '24px 0' }}>
            <h4>Ch·ªâ s·ªë s·ª©c kh·ªèe</h4>
            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 16 }}>
              <div style={{ padding: 16, backgroundColor: '#f5f5f5', borderRadius: 8 }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: 8, marginBottom: 8 }}>
                  <Heart size={20} color={pulseStatus?.color === 'green' ? '#52c41a' : pulseStatus?.color === 'red' ? '#ff4d4f' : '#faad14'} />
                  <strong>Nh·ªãp tim</strong>
                </div>
                <div style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: 8 }}>
                  {healthCheck.pulse} <span style={{ fontSize: '16px', fontWeight: 'normal' }}>bpm</span>
                </div>
                <Tag color={pulseStatus?.color}>{pulseStatus?.text}</Tag>
                <div style={{ marginTop: 8 }}>
                  <Progress
                    percent={Math.min((healthCheck.pulse / 120) * 100, 100)}
                    strokeColor={pulseStatus?.color === 'green' ? '#52c41a' : pulseStatus?.color === 'red' ? '#ff4d4f' : '#faad14'}
                    showInfo={false}
                  />
                  <div style={{ fontSize: '12px', color: '#666', marginTop: 4 }}>
                    B√¨nh th∆∞·ªùng: 60-100 bpm
                  </div>
                </div>
              </div>

              <div style={{ padding: 16, backgroundColor: '#f5f5f5', borderRadius: 8 }}>
                <div style={{ display: 'flex', alignItems: 'center', gap: 8, marginBottom: 8 }}>
                  <TrendingUp size={20} color={bpStatus?.color === 'green' ? '#52c41a' : bpStatus?.color === 'red' ? '#ff4d4f' : '#faad14'} />
                  <strong>Huy·∫øt √°p</strong>
                </div>
                <div style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: 8 }}>
                  {healthCheck.bloodPressure} <span style={{ fontSize: '16px', fontWeight: 'normal' }}>mmHg</span>
                </div>
                <Tag color={bpStatus?.color}>{bpStatus?.text}</Tag>
                <div style={{ fontSize: '12px', color: '#666', marginTop: 8 }}>
                  B√¨nh th∆∞·ªùng: 90/60 - 140/90 mmHg
                </div>
              </div>
            </div>
          </div>

          <Descriptions title="K·∫øt qu·∫£ ƒë√°nh gi√°" column={1} bordered>
            <Descriptions.Item
              label={
                <Space>
                  {getEligibilityIcon(healthCheck.isEligible)}
                  K·∫øt qu·∫£ t·ªïng th·ªÉ
                </Space>
              }
            >
              <Tag color={getEligibilityColor(healthCheck.isEligible)} style={{ fontSize: '16px', padding: '4px 12px' }}>
                {getEligibilityText(healthCheck.isEligible)}
              </Tag>
            </Descriptions.Item>

            <Descriptions.Item label="T√≥m t·∫Øt k·∫øt qu·∫£">
              {healthCheck.resultSummary || 'Kh√¥ng c√≥ ghi ch√∫ ƒë·∫∑c bi·ªát'}
            </Descriptions.Item>

            {!healthCheck.isEligible && (
              <Descriptions.Item
                label={
                  <Space>
                    <AlertCircle size={16} />
                    L√Ω do kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán
                  </Space>
                }
              >
                <Tag color="red">{healthCheck.ineligibleReason || 'Kh√¥ng c√≥ l√Ω do c·ª• th·ªÉ'}</Tag>
              </Descriptions.Item>
            )}

            {healthCheck.bloodTypeId && (
              <Descriptions.Item label="Nh√≥m m√°u ƒë∆∞·ª£c x√°c ƒë·ªãnh">
                <Tag color="red">{healthCheck.bloodTypeName || `ID: ${healthCheck.bloodTypeId}`}</Tag>
              </Descriptions.Item>
            )}
          </Descriptions>

          {healthCheck.isEligible ? (
            <div style={{ marginTop: 16, padding: 16, backgroundColor: '#f6ffed', border: '1px solid #b7eb8f', borderRadius: 8 }}>
              <h4 style={{ color: '#389e0d' }}>‚úÖ ƒê·ªß ƒëi·ªÅu ki·ªán hi·∫øn m√°u</h4>
              <p style={{ margin: 0, color: '#666' }}>
                K·∫øt qu·∫£ ki·ªÉm tra s·ª©c kh·ªèe cho th·∫•y ng∆∞·ªùi n√†y ƒë·ªß ƒëi·ªÅu ki·ªán ƒë·ªÉ hi·∫øn m√°u.
                C√°c ch·ªâ s·ªë s·ª©c kh·ªèe ƒë·ªÅu trong m·ª©c b√¨nh th∆∞·ªùng.
              </p>
            </div>
          ) : (
            <div style={{ marginTop: 16, padding: 16, backgroundColor: '#fff2f0', border: '1px solid #ffccc7', borderRadius: 8 }}>
              <h4 style={{ color: '#cf1322' }}>‚ùå Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán hi·∫øn m√°u</h4>
              <p style={{ margin: 0, color: '#666' }}>
                D·ª±a tr√™n k·∫øt qu·∫£ ki·ªÉm tra, ng∆∞·ªùi n√†y hi·ªán t·∫°i kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán hi·∫øn m√°u.
                L√Ω do: {healthCheck.ineligibleReason || 'C√°c ch·ªâ s·ªë s·ª©c kh·ªèe ch∆∞a ƒë·∫°t y√™u c·∫ßu'}
              </p>
            </div>
          )}

          <div style={{ marginTop: 16, padding: 16, backgroundColor: '#f0f9ff', border: '1px solid #91d5ff', borderRadius: 8 }}>
            <h4 style={{ color: '#1890ff' }}>üí° Ghi ch√∫ cho b√°c sƒ©</h4>
            <ul style={{ margin: 0, paddingLeft: 20, color: '#666' }}>
              <li>Nh·ªãp tim b√¨nh th∆∞·ªùng: 60-100 bpm khi ngh·ªâ ng∆°i</li>
              <li>Huy·∫øt √°p b√¨nh th∆∞·ªùng: 90/60 - 140/90 mmHg</li>
              <li>C·∫ßn ƒë√°nh gi√° t·ªïng th·ªÉ t√¨nh tr·∫°ng s·ª©c kh·ªèe tr∆∞·ªõc khi hi·∫øn m√°u</li>
              <li>Th·ªùi gian ch·ªù t·ªëi thi·ªÉu gi·ªØa c√°c l·∫ßn hi·∫øn m√°u: 8-12 tu·∫ßn</li>
            </ul>
          </div>
        </div>
      ) : (
        <div style={{ textAlign: 'center', padding: '40px 0' }}>
          Kh√¥ng t√¨m th·∫•y th√¥ng tin ki·ªÉm tra s·ª©c kh·ªèe
        </div>
      )}
    </Modal>
  );
};

export default HealthCheckDetailModal;