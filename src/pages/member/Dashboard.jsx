import React, { useState } from 'react';
import { 
  Heart, Calendar, Award, TrendingUp, Clock, MapPin, 
  User, Star, Gift, Bell, ChevronRight, Plus
} from 'lucide-react';
import { StatsCard, InfoCard, ActionCard } from '../../components/ui/Card';
import Button from '../../components/ui/Button';
import Modal, { AlertModal } from '../../components/ui/Modal';

const MemberDashboard = () => {
  const [showBookingModal, setShowBookingModal] = useState(false);

  const memberData = {
    name: "Nguy·ªÖn VƒÉn A",
    totalDonations: 12,
    rewardPoints: 1200,
    nextEligibleDate: "2025-08-15",
    bloodType: "O+",
    lifeSaved: 36,
    memberSince: "2022-03-15"
  };

  const upcomingAppointments = [
    {
      id: 1,
      date: "2025-06-15",
      time: "09:00",
      location: "B·ªánh vi·ªán Ch·ª£ R·∫´y",
      status: "confirmed",
      type: "whole_blood"
    },
    {
      id: 2,
      date: "2025-06-20",
      time: "14:30",
      location: "Trung t√¢m Y t·∫ø Qu·∫≠n 1",
      status: "pending",
      type: "platelet"
    }
  ];

  const donationHistory = [
    {
      id: 1,
      date: "2025-02-15",
      location: "B·ªánh vi·ªán Ch·ª£ R·∫´y",
      type: "M√°u to√†n ph·∫ßn",
      volume: "450ml",
      status: "completed"
    },
    {
      id: 2,
      date: "2024-10-20",
      location: "Trung t√¢m Y t·∫ø Qu·∫≠n 3",
      type: "Ti·ªÉu c·∫ßu",
      volume: "250ml",
      status: "completed"
    },
    {
      id: 3,
      date: "2024-06-18",
      location: "B·ªánh vi·ªán T·ª´ D≈©",
      type: "M√°u to√†n ph·∫ßn",
      volume: "450ml",
      status: "completed"
    }
  ];

  const achievements = [
    {
      id: 1,
      title: "Ng∆∞·ªùi hi·∫øn m√°u th∆∞·ªùng xuy√™n",
      description: "Hi·∫øn m√°u 10 l·∫ßn",
      icon: "üèÜ",
      unlocked: true,
      date: "2024-12-15"
    },
    {
      id: 2,
      title: "C·ª©u tinh nh√¢n lo·∫°i",
      description: "C·ª©u s·ªëng 25 ng∆∞·ªùi",
      icon: "‚≠ê",
      unlocked: true,
      date: "2025-01-20"
    },
    {
      id: 3,
      title: "Ng∆∞·ªùi h√πng m√°u hi·∫øm",
      description: "Hi·∫øn m√°u O- 5 l·∫ßn",
      icon: "üíé",
      unlocked: false,
      date: null
    }
  ];

  const healthTips = [
    {
      title: "U·ªëng ƒë·ªß n∆∞·ªõc",
      description: "U·ªëng √≠t nh·∫•t 2-3 l√≠t n∆∞·ªõc m·ªói ng√†y ƒë·ªÉ duy tr√¨ l∆∞·ª£ng m√°u t·ªët",
      icon: "üíß"
    },
    {
      title: "ƒÇn ƒë·ªß ch·∫•t s·∫Øt",
      description: "Th·ª±c ph·∫©m gi√†u s·∫Øt gi√∫p t√°i t·∫°o h·ªìng c·∫ßu nhanh ch√≥ng",
      icon: "ü•¨"
    },
    {
      title: "Ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß",
      description: "Ng·ªß 7-8 ti·∫øng m·ªói ng√†y ƒë·ªÉ c∆° th·ªÉ ph·ª•c h·ªìi t·ªët nh·∫•t",
      icon: "üò¥"
    }
  ];

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('vi-VN');
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'confirmed': return 'text-green-600 bg-green-100';
      case 'pending': return 'text-yellow-600 bg-yellow-100';
      case 'completed': return 'text-blue-600 bg-blue-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'confirmed': return 'ƒê√£ x√°c nh·∫≠n';
      case 'pending': return 'Ch·ªù x√°c nh·∫≠n';
      case 'completed': return 'Ho√†n th√†nh';
      default: return 'Kh√¥ng x√°c ƒë·ªãnh';
    }
  };

  return (
    <div className="space-y-6">
      <div className="bg-gradient-to-r from-red-500 to-pink-500 rounded-xl p-6 text-white">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold mb-2">
              Ch√†o m·ª´ng tr·ªü l·∫°i, {memberData.name}! üëã
            </h1>
            <p className="text-red-100 mb-4">
              C·∫£m ∆°n b·∫°n ƒë√£ l√† m·ªôt ph·∫ßn c·ªßa c·ªông ƒë·ªìng hi·∫øn m√°u. M·ªói gi·ªçt m√°u c·ªßa b·∫°n ƒë·ªÅu c√≥ √Ω nghƒ©a!
            </p>
            <div className="flex items-center space-x-4 text-sm">
              <div className="flex items-center space-x-2">
                <Heart className="w-4 h-4" fill="currentColor" />
                <span>Nh√≥m m√°u: {memberData.bloodType}</span>
              </div>
              <div className="flex items-center space-x-2">
                <Calendar className="w-4 h-4" />
                <span>Th√†nh vi√™n t·ª´: {formatDate(memberData.memberSince)}</span>
              </div>
            </div>
          </div>
          <div className="hidden md:block">
            <div className="w-24 h-24 bg-white/20 rounded-full flex items-center justify-center">
              <Heart className="w-12 h-12 text-white" fill="currentColor" />
            </div>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <StatsCard
          icon={Heart}
          title="T·ªïng l·∫ßn hi·∫øn m√°u"
          value={memberData.totalDonations}
          change="+2 l·∫ßn trong 6 th√°ng qua"
          trend="up"
        />
        <StatsCard
          icon={Award}
          title="ƒêi·ªÉm t√≠ch l≈©y"
          value={memberData.rewardPoints.toLocaleString()}
          change="+340 ƒëi·ªÉm th√°ng n√†y"
          trend="up"
        />
        <StatsCard
          icon={User}
          title="Ng∆∞·ªùi ƒë∆∞·ª£c c·ª©u"
          value={memberData.lifeSaved}
          change="∆Ø·ªõc t√≠nh t·ª´ s·ªë l·∫ßn hi·∫øn m√°u"
        />
        <StatsCard
          icon={Calendar}
          title="Ng√†y c√≥ th·ªÉ hi·∫øn ti·∫øp"
          value={formatDate(memberData.nextEligibleDate)}
          change="C√≤n 45 ng√†y"
        />
      </div>

      <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
        <ActionCard
          icon={Plus}
          title="ƒê·∫∑t l·ªãch hi·∫øn m√°u"
          description="ƒê·∫∑t l·ªãch h·∫πn hi·∫øn m√°u t·∫°i c√°c ƒëi·ªÉm g·∫ßn b·∫°n"
          actionText="ƒê·∫∑t l·ªãch ngay"
          action={() => setShowBookingModal(true)}
          className="border-2 border-red-200 hover:border-red-300"
        />
        <ActionCard
          icon={MapPin}
          title="T√¨m ƒëi·ªÉm hi·∫øn m√°u"
          description="Xem danh s√°ch c√°c ƒëi·ªÉm hi·∫øn m√°u g·∫ßn b·∫°n"
          actionText="Xem b·∫£n ƒë·ªì"
          action={() => console.log('View map')}
        />
        <ActionCard
          icon={Gift}
          title="ƒê·ªïi ph·∫ßn th∆∞·ªüng"
          description="S·ª≠ d·ª•ng ƒëi·ªÉm t√≠ch l≈©y ƒë·ªÉ nh·∫≠n qu√† t·∫∑ng"
          actionText="Xem qu√† t·∫∑ng"
          action={() => console.log('View rewards')}
        />
      </div>

      <div className="grid lg:grid-cols-2 gap-6">
        <div className="bg-white rounded-xl shadow-lg p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-lg font-semibold text-gray-900 flex items-center">
              <Calendar className="w-5 h-5 text-red-500 mr-2" />
              L·ªãch h·∫πn s·∫Øp t·ªõi
            </h2>
            <Button variant="ghost" size="sm">
              Xem t·∫•t c·∫£
            </Button>
          </div>

          <div className="space-y-4">
            {upcomingAppointments.map((appointment) => (
              <div key={appointment.id} className="border border-gray-200 rounded-lg p-4 hover:bg-gray-50 transition-colors">
                <div className="flex items-center justify-between mb-2">
                  <div className="flex items-center space-x-3">
                    <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                    <span className="font-medium text-gray-900">
                      {formatDate(appointment.date)} - {appointment.time}
                    </span>
                  </div>
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(appointment.status)}`}>
                    {getStatusText(appointment.status)}
                  </span>
                </div>
                <div className="flex items-center space-x-2 text-sm text-gray-600 mb-2">
                  <MapPin className="w-4 h-4" />
                  <span>{appointment.location}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm text-gray-500">
                    Lo·∫°i: {appointment.type === 'whole_blood' ? 'M√°u to√†n ph·∫ßn' : 'Ti·ªÉu c·∫ßu'}
                  </span>
                  <Button variant="ghost" size="sm" icon={<ChevronRight />}>
                    Chi ti·∫øt
                  </Button>
                </div>
              </div>
            ))}
          </div>

          {upcomingAppointments.length === 0 && (
            <div className="text-center py-8">
              <Calendar className="w-12 h-12 text-gray-300 mx-auto mb-4" />
              <p className="text-gray-500 mb-4">B·∫°n ch∆∞a c√≥ l·ªãch h·∫πn n√†o</p>
              <Button variant="primary" onClick={() => setShowBookingModal(true)}>
                ƒê·∫∑t l·ªãch h·∫πn ƒë·∫ßu ti√™n
              </Button>
            </div>
          )}
        </div>

        <div className="bg-white rounded-xl shadow-lg p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-lg font-semibold text-gray-900 flex items-center">
              <Heart className="w-5 h-5 text-red-500 mr-2" />
              L·ªãch s·ª≠ hi·∫øn m√°u g·∫ßn ƒë√¢y
            </h2>
            <Button variant="ghost" size="sm">
              Xem t·∫•t c·∫£
            </Button>
          </div>

          <div className="space-y-4">
            {donationHistory.slice(0, 3).map((donation) => (
              <div key={donation.id} className="flex items-center space-x-4 p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                <div className="w-10 h-10 bg-green-100 rounded-full flex items-center justify-center">
                  <Heart className="w-5 h-5 text-green-600" fill="currentColor" />
                </div>
                <div className="flex-1">
                  <div className="flex items-center justify-between mb-1">
                    <span className="font-medium text-gray-900">{donation.type}</span>
                    <span className="text-sm text-gray-500">{donation.volume}</span>
                  </div>
                  <div className="flex items-center space-x-2 text-sm text-gray-600">
                    <span>{formatDate(donation.date)}</span>
                    <span>‚Ä¢</span>
                    <span>{donation.location}</span>
                  </div>
                </div>
                <div className="w-3 h-3 bg-green-500 rounded-full"></div>
              </div>
            ))}
          </div>
        </div>
      </div>

      <div className="grid lg:grid-cols-2 gap-6">
        <div className="bg-white rounded-xl shadow-lg p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-lg font-semibold text-gray-900 flex items-center">
              <Award className="w-5 h-5 text-yellow-500 mr-2" />
              Th√†nh t√≠ch
            </h2>
            <Button variant="ghost" size="sm">
              Xem t·∫•t c·∫£
            </Button>
          </div>

          <div className="space-y-4">
            {achievements.map((achievement) => (
              <div 
                key={achievement.id} 
                className={`p-4 rounded-lg border-2 transition-all ${
                  achievement.unlocked 
                    ? 'border-yellow-200 bg-yellow-50' 
                    : 'border-gray-200 bg-gray-50 opacity-60'
                }`}
              >
                <div className="flex items-center space-x-3">
                  <div className="text-2xl">{achievement.icon}</div>
                  <div className="flex-1">
                    <h3 className={`font-medium ${
                      achievement.unlocked ? 'text-gray-900' : 'text-gray-500'
                    }`}>
                      {achievement.title}
                    </h3>
                    <p className={`text-sm ${
                      achievement.unlocked ? 'text-gray-600' : 'text-gray-400'
                    }`}>
                      {achievement.description}
                    </p>
                    {achievement.unlocked && achievement.date && (
                      <p className="text-xs text-yellow-600 mt-1">
                        ƒê·∫°t ƒë∆∞·ª£c: {formatDate(achievement.date)}
                      </p>
                    )}
                  </div>
                  {achievement.unlocked && (
                    <div className="w-6 h-6 bg-yellow-500 rounded-full flex items-center justify-center">
                      <Star className="w-4 h-4 text-white" fill="currentColor" />
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="bg-white rounded-xl shadow-lg p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-lg font-semibold text-gray-900 flex items-center">
              <TrendingUp className="w-5 h-5 text-green-500 mr-2" />
              M·∫πo s·ª©c kh·ªèe
            </h2>
          </div>

          <div className="space-y-4">
            {healthTips.map((tip, index) => (
              <div key={index} className="p-4 bg-green-50 rounded-lg border border-green-200">
                <div className="flex items-start space-x-3">
                  <div className="text-xl">{tip.icon}</div>
                  <div>
                    <h3 className="font-medium text-gray-900 mb-1">{tip.title}</h3>
                    <p className="text-sm text-gray-600">{tip.description}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>

          <div className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
            <div className="flex items-center space-x-2 mb-2">
              <Bell className="w-5 h-5 text-blue-600" />
              <span className="font-medium text-blue-900">Nh·∫Øc nh·ªü</span>
            </div>
            <p className="text-sm text-blue-700">
              B·∫°n c√≥ th·ªÉ hi·∫øn m√°u l·∫°i sau ng√†y {formatDate(memberData.nextEligibleDate)}. 
              H√£y ƒë·∫∑t l·ªãch h·∫πn s·ªõm ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ ch·ªó!
            </p>
          </div>
        </div>
      </div>

      <AlertModal
        isOpen={showBookingModal}
        onClose={() => setShowBookingModal(false)}
        type="info"
        title="ƒê·∫∑t l·ªãch hi·∫øn m√°u"
        message="Ch·ª©c nƒÉng ƒë·∫∑t l·ªãch h·∫πn s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai trong phi√™n b·∫£n ti·∫øp theo. Hi·ªán t·∫°i b·∫°n c√≥ th·ªÉ g·ªçi hotline 1900 1234 ƒë·ªÉ ƒë·∫∑t l·ªãch."
        buttonText="ƒê√£ hi·ªÉu"
      />
    </div>
  );
};

export default MemberDashboard;